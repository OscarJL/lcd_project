
display_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005c6  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002fb  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000040a  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000258  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000294  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 ee       	ldi	r30, 0xE6	; 230
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 30       	cpi	r26, 0x0C	; 12
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	02 d0       	rcall	.+4      	; 0x5c <main>
  58:	c4 c0       	rjmp	.+392    	; 0x1e2 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <main>:


int main(void)
{
	
	DDRD = 0xFF;
  5c:	8f ef       	ldi	r24, 0xFF	; 255
  5e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  60:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
  62:	87 b9       	out	0x07, r24	; 7
	
	lcd_init();
  64:	71 d0       	rcall	.+226    	; 0x148 <lcd_init>
	lcd_clrscr();
  66:	5b d0       	rcall	.+182    	; 0x11e <lcd_clrscr>
	lcd_puts("Hello World");
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	91 e0       	ldi	r25, 0x01	; 1
  6c:	5e d0       	rcall	.+188    	; 0x12a <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	2f ef       	ldi	r18, 0xFF	; 255
  70:	80 e7       	ldi	r24, 0x70	; 112
  72:	92 e0       	ldi	r25, 0x02	; 2
  74:	21 50       	subi	r18, 0x01	; 1
  76:	80 40       	sbci	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <main+0x18>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <main+0x22>
  7e:	00 00       	nop
	
	
    while(1)
    {
        _delay_ms(100);
		PORTD = 0;
  80:	1b b8       	out	0x0b, r1	; 11
  82:	f5 cf       	rjmp	.-22     	; 0x6e <main+0x12>

00000084 <lcd_write>:
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
  84:	66 23       	and	r22, r22
  86:	11 f0       	breq	.+4      	; 0x8c <lcd_write+0x8>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
  88:	40 9a       	sbi	0x08, 0	; 8
  8a:	01 c0       	rjmp	.+2      	; 0x8e <lcd_write+0xa>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
  8c:	40 98       	cbi	0x08, 0	; 8
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();

    #else //using 8-Bit_Mode
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
  8e:	88 23       	and	r24, r24
  90:	14 f4       	brge	.+4      	; 0x96 <lcd_write+0x12>
  92:	2f 9a       	sbi	0x05, 7	; 5
  94:	01 c0       	rjmp	.+2      	; 0x98 <lcd_write+0x14>
  96:	2f 98       	cbi	0x05, 7	; 5
      lcd_db6_port_set(data&_BV(6));
  98:	86 ff       	sbrs	r24, 6
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <lcd_write+0x1c>
  9c:	2e 9a       	sbi	0x05, 6	; 5
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <lcd_write+0x1e>
  a0:	2e 98       	cbi	0x05, 6	; 5
      lcd_db5_port_set(data&_BV(5));
  a2:	85 ff       	sbrs	r24, 5
  a4:	02 c0       	rjmp	.+4      	; 0xaa <lcd_write+0x26>
  a6:	2d 9a       	sbi	0x05, 5	; 5
  a8:	01 c0       	rjmp	.+2      	; 0xac <lcd_write+0x28>
  aa:	2d 98       	cbi	0x05, 5	; 5
      lcd_db4_port_set(data&_BV(4));
  ac:	84 ff       	sbrs	r24, 4
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <lcd_write+0x30>
  b0:	2c 9a       	sbi	0x05, 4	; 5
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_write+0x32>
  b4:	2c 98       	cbi	0x05, 4	; 5
      lcd_db3_port_set(data&_BV(3));                  //Output High Nibble
  b6:	83 ff       	sbrs	r24, 3
  b8:	02 c0       	rjmp	.+4      	; 0xbe <lcd_write+0x3a>
  ba:	2b 9a       	sbi	0x05, 3	; 5
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <lcd_write+0x3c>
  be:	2b 98       	cbi	0x05, 3	; 5
      lcd_db2_port_set(data&_BV(2));
  c0:	82 ff       	sbrs	r24, 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <lcd_write+0x44>
  c4:	2a 9a       	sbi	0x05, 2	; 5
  c6:	01 c0       	rjmp	.+2      	; 0xca <lcd_write+0x46>
  c8:	2a 98       	cbi	0x05, 2	; 5
      lcd_db1_port_set(data&_BV(1));
  ca:	81 ff       	sbrs	r24, 1
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <lcd_write+0x4e>
  ce:	29 9a       	sbi	0x05, 1	; 5
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <lcd_write+0x50>
  d2:	29 98       	cbi	0x05, 1	; 5
      lcd_db0_port_set(data&_BV(0));
  d4:	80 ff       	sbrs	r24, 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <lcd_write+0x58>
  d8:	28 9a       	sbi	0x05, 0	; 5
  da:	01 c0       	rjmp	.+2      	; 0xde <lcd_write+0x5a>
  dc:	28 98       	cbi	0x05, 0	; 5

      Delay_ns(100);
  de:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
  e0:	42 9a       	sbi	0x08, 2	; 8
      lcd_db1_port_set(data&_BV(1));
      lcd_db0_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_write+0x60>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_write+0x62>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
  e6:	42 98       	cbi	0x08, 2	; 8
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
  e8:	2f 9a       	sbi	0x05, 7	; 5
      lcd_db6_port_high();
  ea:	2e 9a       	sbi	0x05, 6	; 5
      lcd_db5_port_high();
  ec:	2d 9a       	sbi	0x05, 5	; 5
      lcd_db4_port_high();
  ee:	2c 9a       	sbi	0x05, 4	; 5
      lcd_db3_port_high();
  f0:	2b 9a       	sbi	0x05, 3	; 5
      lcd_db2_port_high();
  f2:	2a 9a       	sbi	0x05, 2	; 5
      lcd_db1_port_high();
  f4:	29 9a       	sbi	0x05, 1	; 5
      lcd_db0_port_high();
  f6:	28 9a       	sbi	0x05, 0	; 5
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
  f8:	61 11       	cpse	r22, r1
  fa:	09 c0       	rjmp	.+18     	; 0x10e <lcd_write+0x8a>
  fc:	84 30       	cpi	r24, 0x04	; 4
  fe:	38 f4       	brcc	.+14     	; 0x10e <lcd_write+0x8a>
        Delay_us(1640);
 100:	8f ec       	ldi	r24, 0xCF	; 207
 102:	9c e0       	ldi	r25, 0x0C	; 12
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_write+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_write+0x86>
 10a:	00 00       	nop
 10c:	08 95       	ret
      else Delay_us(40);
 10e:	9a e6       	ldi	r25, 0x6A	; 106
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x8c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x92>
 116:	08 95       	ret

00000118 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	b4 df       	rcall	.-152    	; 0x84 <lcd_write>
 11c:	08 95       	ret

0000011e <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	fb df       	rcall	.-10     	; 0x118 <lcd_command>
 122:	08 95       	ret

00000124 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	ae df       	rcall	.-164    	; 0x84 <lcd_write>
 128:	08 95       	ret

0000012a <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
    register char c;

    while ((c=*s++)) 
 12e:	ec 01       	movw	r28, r24
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <lcd_puts+0x18>
      lcd_putc(c);
 13a:	f4 df       	rcall	.-24     	; 0x124 <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 13c:	89 91       	ld	r24, Y+
 13e:	81 11       	cpse	r24, r1
 140:	fc cf       	rjmp	.-8      	; 0x13a <lcd_puts+0x10>
      lcd_putc(c);
  }
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 148:	3a 9a       	sbi	0x07, 2	; 7
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 14a:	38 9a       	sbi	0x07, 0	; 7
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
 14c:	39 9a       	sbi	0x07, 1	; 7
    #endif
    lcd_db7_ddr_high();
 14e:	27 9a       	sbi	0x04, 7	; 4
    lcd_db6_ddr_high();
 150:	26 9a       	sbi	0x04, 6	; 4
    lcd_db5_ddr_high();
 152:	25 9a       	sbi	0x04, 5	; 4
    lcd_db4_ddr_high();
 154:	24 9a       	sbi	0x04, 4	; 4
    #if LCD_BITS==8
      lcd_db3_ddr_high();
 156:	23 9a       	sbi	0x04, 3	; 4
      lcd_db2_ddr_high();
 158:	22 9a       	sbi	0x04, 2	; 4
      lcd_db1_ddr_high();
 15a:	21 9a       	sbi	0x04, 1	; 4
      lcd_db0_ddr_high();
 15c:	20 9a       	sbi	0x04, 0	; 4
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 15e:	42 98       	cbi	0x08, 2	; 8
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 160:	40 98       	cbi	0x08, 0	; 8
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
 162:	41 98       	cbi	0x08, 1	; 8
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 164:	2f 9a       	sbi	0x05, 7	; 5
    lcd_db6_port_high();
 166:	2e 9a       	sbi	0x05, 6	; 5
    lcd_db5_port_high();
 168:	2d 9a       	sbi	0x05, 5	; 5
    lcd_db4_port_high();
 16a:	2c 9a       	sbi	0x05, 4	; 5
    #if LCD_BITS==8
      lcd_db3_port_high();
 16c:	2b 9a       	sbi	0x05, 3	; 5
      lcd_db2_port_high();
 16e:	2a 9a       	sbi	0x05, 2	; 5
      lcd_db1_port_high();
 170:	29 9a       	sbi	0x05, 1	; 5
      lcd_db0_port_high();
 172:	28 9a       	sbi	0x05, 0	; 5
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 174:	8f e2       	ldi	r24, 0x2F	; 47
 176:	95 e7       	ldi	r25, 0x75	; 117
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_init+0x30>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_init+0x36>
 17e:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 180:	2f 98       	cbi	0x05, 7	; 5
    lcd_db6_port_low();
 182:	2e 98       	cbi	0x05, 6	; 5
    Delay_ns(100);
 184:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 186:	42 9a       	sbi	0x08, 2	; 8
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x42>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x44>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 18c:	42 98       	cbi	0x08, 2	; 8
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	90 e2       	ldi	r25, 0x20	; 32
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x4a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x50>
 198:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 19a:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_init+0x56>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x58>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1a0:	42 98       	cbi	0x08, 2	; 8

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init+0x5e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_init+0x64>
 1ac:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1ae:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0x6a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init+0x6c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1b4:	42 98       	cbi	0x08, 2	; 8

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 1b6:	9a e6       	ldi	r25, 0x6A	; 106
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x70>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_init+0x76>
          }
        if (c<2)
          lcd_db3_port_low();
      #endif

      lcd_db2_port_low();
 1be:	2a 98       	cbi	0x05, 2	; 5
      Delay_ns(100);
 1c0:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1c2:	42 9a       	sbi	0x08, 2	; 8
      #endif

      lcd_db2_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_init+0x7e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0x80>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1c8:	42 98       	cbi	0x08, 2	; 8
      lcd_db2_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 1ca:	8a e6       	ldi	r24, 0x6A	; 106
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x84>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x8a>
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	a1 df       	rcall	.-190    	; 0x118 <lcd_command>

    //Display Clear
    lcd_clrscr();
 1d6:	a3 df       	rcall	.-186    	; 0x11e <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	9e df       	rcall	.-196    	; 0x118 <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	9c df       	rcall	.-200    	; 0x118 <lcd_command>
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
