
display_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000098  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000007fd  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000040e  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000483  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000012c  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002bd  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002e6  00000000  00000000  0000185d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	27 c0       	rjmp	.+78     	; 0x56 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 30       	cpi	r26, 0x00	; 0
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	23 d0       	rcall	.+70     	; 0x98 <main>
  52:	38 c1       	rjmp	.+624    	; 0x2c4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_3>:
// Global variables 

cursor_position cp = {.0, .0};

ISR(PCINT0_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
	
}
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <init_push_buttons>:

void init_push_buttons()
{
	
	//Set PB0-2 to inputs with pull-up resistors enabled
	CLR_BIT(DDRB, PB0);
  6a:	20 98       	cbi	0x04, 0	; 4
	CLR_BIT(DDRB, PB1);
  6c:	21 98       	cbi	0x04, 1	; 4
	CLR_BIT(DDRB, PB2);
  6e:	22 98       	cbi	0x04, 2	; 4
	SET_BIT(PORTB, PB0);
  70:	28 9a       	sbi	0x05, 0	; 5
	SET_BIT(PORTB, PB1);
  72:	29 9a       	sbi	0x05, 1	; 5
	SET_BIT(PORTB, PB2);
  74:	2a 9a       	sbi	0x05, 2	; 5
	//Enables interrupt for PB0-2
	SET_BIT(PCICR, PCIE0);
  76:	e8 e6       	ldi	r30, 0x68	; 104
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	80 83       	st	Z, r24
	SET_BIT(PCMSK0, PB0);
  80:	eb e6       	ldi	r30, 0x6B	; 107
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	81 60       	ori	r24, 0x01	; 1
  88:	80 83       	st	Z, r24
	SET_BIT(PCMSK0, PB1);
  8a:	80 81       	ld	r24, Z
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	80 83       	st	Z, r24
	SET_BIT(PCMSK0, PB2);
  90:	80 81       	ld	r24, Z
  92:	84 60       	ori	r24, 0x04	; 4
  94:	80 83       	st	Z, r24
  96:	08 95       	ret

00000098 <main>:
}



int main(void)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	2c 97       	sbiw	r28, 0x0c	; 12
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	sei();
  ac:	78 94       	sei
	char itoa_buffer[12];
	
	DDRD = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  b2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
  b4:	87 b9       	out	0x07, r24	; 7
	
	init_push_buttons();
  b6:	d9 df       	rcall	.-78     	; 0x6a <init_push_buttons>
	lcd_init();
  b8:	7b d0       	rcall	.+246    	; 0x1b0 <lcd_init>
	lcd_clrscr();
  ba:	65 d0       	rcall	.+202    	; 0x186 <lcd_clrscr>
	lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON) | _BV(LCD_DISPLAYMODE_BLINK));
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	60 d0       	rcall	.+192    	; 0x180 <lcd_command>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  c0:	4a e0       	ldi	r20, 0x0A	; 10
  c2:	be 01       	movw	r22, r28
  c4:	6f 5f       	subi	r22, 0xFF	; 255
  c6:	7f 4f       	sbci	r23, 0xFF	; 255
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	c8 d0       	rcall	.+400    	; 0x25e <__itoa_ncheck>
	itoa(PB1, itoa_buffer, 10);
	lcd_puts(itoa_buffer);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	5f d0       	rcall	.+190    	; 0x192 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	80 e7       	ldi	r24, 0x70	; 112
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x42>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x4c>
  e4:	00 00       	nop
	
	
    while(1)
    {
        _delay_ms(100);
		PORTD = 0;
  e6:	1b b8       	out	0x0b, r1	; 11
  e8:	f5 cf       	rjmp	.-22     	; 0xd4 <main+0x3c>

000000ea <lcd_write>:
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
  ea:	66 23       	and	r22, r22
  ec:	11 f0       	breq	.+4      	; 0xf2 <lcd_write+0x8>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
  ee:	40 9a       	sbi	0x08, 0	; 8
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <lcd_write+0xa>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
  f2:	40 98       	cbi	0x08, 0	; 8
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
  f4:	88 23       	and	r24, r24
  f6:	14 f4       	brge	.+4      	; 0xfc <lcd_write+0x12>
  f8:	2f 9a       	sbi	0x05, 7	; 5
  fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_write+0x14>
  fc:	2f 98       	cbi	0x05, 7	; 5
      lcd_db6_port_set(data&_BV(6));
  fe:	86 ff       	sbrs	r24, 6
 100:	02 c0       	rjmp	.+4      	; 0x106 <lcd_write+0x1c>
 102:	2e 9a       	sbi	0x05, 6	; 5
 104:	01 c0       	rjmp	.+2      	; 0x108 <lcd_write+0x1e>
 106:	2e 98       	cbi	0x05, 6	; 5
      lcd_db5_port_set(data&_BV(5));
 108:	85 ff       	sbrs	r24, 5
 10a:	02 c0       	rjmp	.+4      	; 0x110 <lcd_write+0x26>
 10c:	2d 9a       	sbi	0x05, 5	; 5
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_write+0x28>
 110:	2d 98       	cbi	0x05, 5	; 5
      lcd_db4_port_set(data&_BV(4));
 112:	84 ff       	sbrs	r24, 4
 114:	02 c0       	rjmp	.+4      	; 0x11a <lcd_write+0x30>
 116:	2c 9a       	sbi	0x05, 4	; 5
 118:	01 c0       	rjmp	.+2      	; 0x11c <lcd_write+0x32>
 11a:	2c 98       	cbi	0x05, 4	; 5

      Delay_ns(100);
 11c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 11e:	42 9a       	sbi	0x08, 2	; 8
      lcd_db4_port_set(data&_BV(4));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_write+0x38>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_write+0x3a>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 124:	42 98       	cbi	0x08, 2	; 8
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 126:	83 ff       	sbrs	r24, 3
 128:	02 c0       	rjmp	.+4      	; 0x12e <lcd_write+0x44>
 12a:	2f 9a       	sbi	0x05, 7	; 5
 12c:	01 c0       	rjmp	.+2      	; 0x130 <lcd_write+0x46>
 12e:	2f 98       	cbi	0x05, 7	; 5
      lcd_db6_port_set(data&_BV(2));
 130:	82 ff       	sbrs	r24, 2
 132:	02 c0       	rjmp	.+4      	; 0x138 <lcd_write+0x4e>
 134:	2e 9a       	sbi	0x05, 6	; 5
 136:	01 c0       	rjmp	.+2      	; 0x13a <lcd_write+0x50>
 138:	2e 98       	cbi	0x05, 6	; 5
      lcd_db5_port_set(data&_BV(1));
 13a:	81 ff       	sbrs	r24, 1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <lcd_write+0x58>
 13e:	2d 9a       	sbi	0x05, 5	; 5
 140:	01 c0       	rjmp	.+2      	; 0x144 <lcd_write+0x5a>
 142:	2d 98       	cbi	0x05, 5	; 5
      lcd_db4_port_set(data&_BV(0));
 144:	80 ff       	sbrs	r24, 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <lcd_write+0x62>
 148:	2c 9a       	sbi	0x05, 4	; 5
 14a:	01 c0       	rjmp	.+2      	; 0x14e <lcd_write+0x64>
 14c:	2c 98       	cbi	0x05, 4	; 5

      Delay_ns(100);
 14e:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 150:	42 9a       	sbi	0x08, 2	; 8
      lcd_db4_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_write+0x6a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_write+0x6c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 156:	42 98       	cbi	0x08, 2	; 8
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 158:	2f 9a       	sbi	0x05, 7	; 5
      lcd_db6_port_high();
 15a:	2e 9a       	sbi	0x05, 6	; 5
      lcd_db5_port_high();
 15c:	2d 9a       	sbi	0x05, 5	; 5
      lcd_db4_port_high();
 15e:	2c 9a       	sbi	0x05, 4	; 5
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 160:	61 11       	cpse	r22, r1
 162:	09 c0       	rjmp	.+18     	; 0x176 <lcd_write+0x8c>
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	38 f4       	brcc	.+14     	; 0x176 <lcd_write+0x8c>
        Delay_us(1640);
 168:	8f ec       	ldi	r24, 0xCF	; 207
 16a:	9c e0       	ldi	r25, 0x0C	; 12
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_write+0x82>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_write+0x88>
 172:	00 00       	nop
 174:	08 95       	ret
      else Delay_us(40);
 176:	9a e6       	ldi	r25, 0x6A	; 106
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write+0x8e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_write+0x94>
 17e:	08 95       	ret

00000180 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	b3 df       	rcall	.-154    	; 0xea <lcd_write>
 184:	08 95       	ret

00000186 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	fb df       	rcall	.-10     	; 0x180 <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	ad df       	rcall	.-166    	; 0xea <lcd_write>
 190:	08 95       	ret

00000192 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
    register char c;

    while ((c=*s++)) 
 196:	ec 01       	movw	r28, r24
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	21 f0       	breq	.+8      	; 0x1aa <lcd_puts+0x18>
      lcd_putc(c);
 1a2:	f4 df       	rcall	.-24     	; 0x18c <lcd_putc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 1a4:	89 91       	ld	r24, Y+
 1a6:	81 11       	cpse	r24, r1
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <lcd_puts+0x10>
      lcd_putc(c);
  }
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 1b0:	3a 9a       	sbi	0x07, 2	; 7
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 1b2:	38 9a       	sbi	0x07, 0	; 7
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
 1b4:	39 9a       	sbi	0x07, 1	; 7
    #endif
    lcd_db7_ddr_high();
 1b6:	27 9a       	sbi	0x04, 7	; 4
    lcd_db6_ddr_high();
 1b8:	26 9a       	sbi	0x04, 6	; 4
    lcd_db5_ddr_high();
 1ba:	25 9a       	sbi	0x04, 5	; 4
    lcd_db4_ddr_high();
 1bc:	24 9a       	sbi	0x04, 4	; 4
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1be:	42 98       	cbi	0x08, 2	; 8
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 1c0:	40 98       	cbi	0x08, 0	; 8
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
 1c2:	41 98       	cbi	0x08, 1	; 8
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 1c4:	2f 9a       	sbi	0x05, 7	; 5
    lcd_db6_port_high();
 1c6:	2e 9a       	sbi	0x05, 6	; 5
    lcd_db5_port_high();
 1c8:	2d 9a       	sbi	0x05, 5	; 5
    lcd_db4_port_high();
 1ca:	2c 9a       	sbi	0x05, 4	; 5
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 1cc:	8f e2       	ldi	r24, 0x2F	; 47
 1ce:	95 e7       	ldi	r25, 0x75	; 117
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x20>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x26>
 1d6:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 1d8:	2f 98       	cbi	0x05, 7	; 5
    lcd_db6_port_low();
 1da:	2e 98       	cbi	0x05, 6	; 5
    Delay_ns(100);
 1dc:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1de:	42 9a       	sbi	0x08, 2	; 8
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_init+0x32>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x34>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1e4:	42 98       	cbi	0x08, 2	; 8
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	90 e2       	ldi	r25, 0x20	; 32
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x3a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_init+0x40>
 1f0:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1f2:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_init+0x46>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_init+0x48>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1f8:	42 98       	cbi	0x08, 2	; 8

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 1fa:	87 ec       	ldi	r24, 0xC7	; 199
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x4e>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x54>
 204:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 206:	42 9a       	sbi	0x08, 2	; 8
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x5a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_init+0x5c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 20c:	42 98       	cbi	0x08, 2	; 8

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 20e:	9a e6       	ldi	r25, 0x6A	; 106
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x60>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x66>

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 216:	2c 98       	cbi	0x05, 4	; 5
      Delay_ns(100);
 218:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 21a:	42 9a       	sbi	0x08, 2	; 8
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x6e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_init+0x70>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 220:	42 98       	cbi	0x08, 2	; 8
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 222:	8a e6       	ldi	r24, 0x6A	; 106
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_init+0x74>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_init+0x7a>

      lcd_db4_port_low();
 22a:	2c 98       	cbi	0x05, 4	; 5
      Delay_ns(100);
 22c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 22e:	42 9a       	sbi	0x08, 2	; 8
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init+0x82>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_init+0x84>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 234:	42 98       	cbi	0x08, 2	; 8
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x88>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_init+0x8a>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 23a:	2f 9a       	sbi	0x05, 7	; 5
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 23c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 23e:	42 9a       	sbi	0x08, 2	; 8
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x92>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_init+0x94>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 244:	42 98       	cbi	0x08, 2	; 8

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 246:	9a e6       	ldi	r25, 0x6A	; 106
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init+0x98>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_init+0x9e>
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 24e:	88 e0       	ldi	r24, 0x08	; 8
 250:	97 df       	rcall	.-210    	; 0x180 <lcd_command>

    //Display Clear
    lcd_clrscr();
 252:	99 df       	rcall	.-206    	; 0x186 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	94 df       	rcall	.-216    	; 0x180 <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	92 df       	rcall	.-220    	; 0x180 <lcd_command>
 25c:	08 95       	ret

0000025e <__itoa_ncheck>:
 25e:	bb 27       	eor	r27, r27
 260:	4a 30       	cpi	r20, 0x0A	; 10
 262:	31 f4       	brne	.+12     	; 0x270 <__itoa_ncheck+0x12>
 264:	99 23       	and	r25, r25
 266:	22 f4       	brpl	.+8      	; 0x270 <__itoa_ncheck+0x12>
 268:	bd e2       	ldi	r27, 0x2D	; 45
 26a:	90 95       	com	r25
 26c:	81 95       	neg	r24
 26e:	9f 4f       	sbci	r25, 0xFF	; 255
 270:	01 c0       	rjmp	.+2      	; 0x274 <__utoa_common>

00000272 <__utoa_ncheck>:
 272:	bb 27       	eor	r27, r27

00000274 <__utoa_common>:
 274:	fb 01       	movw	r30, r22
 276:	55 27       	eor	r21, r21
 278:	aa 27       	eor	r26, r26
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	aa 1f       	adc	r26, r26
 280:	a4 17       	cp	r26, r20
 282:	10 f0       	brcs	.+4      	; 0x288 <__utoa_common+0x14>
 284:	a4 1b       	sub	r26, r20
 286:	83 95       	inc	r24
 288:	50 51       	subi	r21, 0x10	; 16
 28a:	b9 f7       	brne	.-18     	; 0x27a <__utoa_common+0x6>
 28c:	a0 5d       	subi	r26, 0xD0	; 208
 28e:	aa 33       	cpi	r26, 0x3A	; 58
 290:	08 f0       	brcs	.+2      	; 0x294 <__utoa_common+0x20>
 292:	a9 5d       	subi	r26, 0xD9	; 217
 294:	a1 93       	st	Z+, r26
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	79 f7       	brne	.-34     	; 0x278 <__utoa_common+0x4>
 29a:	b1 11       	cpse	r27, r1
 29c:	b1 93       	st	Z+, r27
 29e:	11 92       	st	Z+, r1
 2a0:	cb 01       	movw	r24, r22
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <strrev>

000002a4 <strrev>:
 2a4:	dc 01       	movw	r26, r24
 2a6:	fc 01       	movw	r30, r24
 2a8:	67 2f       	mov	r22, r23
 2aa:	71 91       	ld	r23, Z+
 2ac:	77 23       	and	r23, r23
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <strrev+0x4>
 2b0:	32 97       	sbiw	r30, 0x02	; 2
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <strrev+0x18>
 2b4:	7c 91       	ld	r23, X
 2b6:	6d 93       	st	X+, r22
 2b8:	70 83       	st	Z, r23
 2ba:	62 91       	ld	r22, -Z
 2bc:	ae 17       	cp	r26, r30
 2be:	bf 07       	cpc	r27, r31
 2c0:	c8 f3       	brcs	.-14     	; 0x2b4 <strrev+0x10>
 2c2:	08 95       	ret

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
